package org.adventOfCode.code2016;

import org.adventOfCode.GenericExcercise;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Excercise2 extends GenericExcercise {

	String testInput = "LRRLLLRDRURUDLRDDURULRULLDLRRLRLDULUDDDDLLRRLDUUDULDRURRLDULRRULDLRDUDLRLLLULDUURRRRURURULURRULRURDLULURDRDURDRLRRUUDRULLLLLDRULDDLLRDLURRLDUURDLRLUDLDUDLURLRLDRLUDUULRRRUUULLRDURUDRUDRDRLLDLDDDLDLRRULDUUDULRUDDRLLURDDRLDDUDLLLLULRDDUDDUUULRULUULRLLDULUDLLLLURRLDLUDLDDLDRLRRDRDUDDDLLLLLRRLLRLUDLULLDLDDRRUDDRLRDDURRDULLLURLRDLRRLRDLDURLDDULLLDRRURDULUDUDLLLDDDLLRLDDDLLRRLLURUULULDDDUDULUUURRUUDLDULULDRDDLURURDLDLULDUDUDDDDD\n"+
			"RUURUDRDUULRDDLRLLLULLDDUDRDURDLRUULLLLUDUDRRUDUULRRUUDDURDDDLLLLRRUURULULLUDDLRDUDULRURRDRDLDLDUULUULUDDLUDRLULRUDRDDDLRRUUDRRLULUULDULDDLRLURDRLURRRRULDDRLDLLLRULLDURRLUDULDRDUDRLRLULRURDDRLUDLRURDDRDULUDLDLLLDRLRUDLLLLLDUDRDUURUDDUDLDLDUDLLDLRRDLULLURLDDUDDRDUDLDDUULDRLURRDLDLLUUDLDLURRLDRDDLLDLRLULUDRDLLLDRLRLLLDRUULUDLLURDLLUURUDURDDRDRDDUDDRRLLUULRRDRULRURRULLDDDUDULDDRULRLDURLUDULDLDDDLRULLULULUDLDDRDLRDRDLDULRRLRLRLLLLLDDDRDDULRDULRRLDLUDDDDLUDRLLDLURDLRDLDRDRDURRDUDULLLDLUDLDRLRRDDDRRLRLLULDRLRLLLLDUUURDLLULLUDDRLULRDLDLDURRRUURDUDRDLLLLLLDDDURLDULDRLLDUDRULRRDLDUDRLLUUUDULURRUR\n"+
			"URRRLRLLDDDRRLDLDLUDRDRDLDUDDDLDRRDRLDULRRDRRDUDRRUUDUUUDLLUURLRDRRURRRRUDRLLLLRRDULRDDRUDLRLUDURRLRLDDRRLUULURLURURUDRULDUUDLULUURRRDDLRDLUDRDLDDDLRUDURRLLRDDRDRLRLLRLRUUDRRLDLUDRURUULDUURDRUULDLLDRDLRDUUDLRLRRLUDRRUULRDDRDLDDULRRRURLRDDRLLLRDRLURDLDRUULDRRRLURURUUUULULRURULRLDDDDLULRLRULDUDDULRUULRRRRRLRLRUDDURLDRRDDULLUULLDLUDDDUURLRRLDULUUDDULDDUULLLRUDLLLRDDDLUUURLDUDRLLLDRRLDDLUDLLDLRRRLDDRUULULUURDDLUR\n"+
			"UULDRLUULURDRLDULURLUDULDRRDULULUDLLDURRRURDRLRLLRLDDLURRDLUUDLULRDULDRDLULULULDDLURULLULUDDRRULULULRDULRUURRRUDLRLURDRURDRRUDLDDUURDUUDLULDUDDLUUURURLRRDLULURDURRRURURDUURDRRURRDDULRULRRDRRDRUUUUULRLUUUDUUULLRRDRDULRDDULDRRULRLDLLULUUULUUDRDUUUDLLULDDRRDULUURRDUULLUUDRLLDUDLLLURURLUDDLRURRDRLDDURLDLLUURLDUURULLLRURURLULLLUURUUULLDLRDLUDDRRDDUUDLRURDDDRURUURURRRDLUDRLUULDUDLRUUDRLDRRDLDLDLRUDDDDRRDLDDDLLDLULLRUDDUDDDLDDUURLDUDLRDRURULDULULUDRRDLLRURDULDDRRDLUURUUULULRURDUUDLULLURUDDRLDDUDURRDURRUURLDLLDDUUDLLUURDRULLRRUUURRLLDRRDLURRURDULDDDDRDD\n"+
			"LLRUDRUUDUDLRDRDRRLRDRRUDRDURURRLDDDDLRDURDLRRUDRLLRDDUULRULURRRLRULDUURLRURLRLDUDLLDULULDUUURLRURUDDDDRDDLLURDLDRRUDRLDULLRULULLRURRLLURDLLLRRRRDRULRUDUDUDULUURUUURDDLDRDRUUURLDRULDUDULRLRLULLDURRRRURRRDRULULUDLULDDRLRRULLDURUDDUULRUUURDRRLULRRDLDUDURUUUUUURRUUULURDUUDLLUURDLULUDDLUUULLDURLDRRDDLRRRDRLLDRRLUDRLLLDRUULDUDRDDRDRRRLUDUDRRRLDRLRURDLRULRDUUDRRLLRLUUUUURRURLURDRRUURDRRLULUDULRLLURDLLULDDDLRDULLLUDRLURDDLRURLLRDRDULULDDRDDLDDRUUURDUUUDURRLRDUDLRRLRRRDUULDRDUDRLDLRULDL";
	
	public final char[][] keyPad1 = {{'1','2','3'},{'4','5','6'},{'7','8','9'}};
	public final char[][] keyPad2 =  {{' ',' ','1',' ',' '},
									  {' ','2','3','4',' '},
									  {'5','6','7','8','9'},
									  {' ','A','B','C',' '},
									  {' ',' ','D',' ',' '}};
	
	
	@Override
	public void executeTest() throws Exception {
		String result = getCode(testInput,keyPad1,'5');
		logger.info("Exercise 2 result A: " + result);
		
		result = getCode(testInput,keyPad2,'5');
		logger.info("Exercise 2 result B: " + result);
	}
	
	public String getCode(String input,char[][] keyPad,char startkey) throws Exception
	{
		StringBuilder result = new StringBuilder();
		List<String> instructionList = new ArrayList<String>(Arrays.asList(input.split("\n")));
		Coordinate coordinate = new Coordinate(keyPad);
		coordinate.setStartKey(startkey);
		
		for(String instruction : instructionList)
		{
			instruction.chars().forEach((c) -> coordinate.move((char)c));
			result.append(coordinate.getKey());
		}
		return result.toString();
	}
	

	private class Coordinate{
		int x = 1;
		int y = 1;
		
		private char[][] numpad;
		
		public Coordinate(char[][] numpad)
		{
			this.numpad = numpad;
		}
		
		public void setStartKey(char key) throws Exception
		{
			for(int i = 0; i < numpad.length;i++)
				for(int j = 0; j < numpad[i].length;j++)
				{
					if(numpad[i][j] == key)
					{
						y = i;
						x = j;
						return;
					}
				}
			throw new Exception("Start key not found");
		}
		
		private void move(char c) 
		{
			switch(c)
			{
				case 'U':
					if(y+1 < numpad.length && numpad[y+1][x] != ' ') y++;
					break;
				case 'D':
					if(y > 0 && numpad[y-1][x] != ' ') y--;
					break;
				case 'L':
					if(x >0 && numpad[y][x-1] != ' ') x--;
					break;
				case 'R':
					if(x+1 < numpad[y].length && numpad[y][x+1] != ' ') x++;
					break;
				default:
					throw new IllegalArgumentException("Unexpected input found: "+c);
			}
			
		}
		
		public char getKey()
		{
			return numpad[numpad.length-y-1][x];
		}
	}
	
}
